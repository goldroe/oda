
Tokens:
    grouping:
        ( ) [ ] { }
    unary ops:
        + - ! ~ *

    binary ops: 
        LSHIFT = '<<'
        RSHIFT = '>>'
        EQ = '=='
        NOTEQ = '!='
        LTEQ = '<='
        GTEQ = '>='
        AND = '&&'
        OR = '||'

        + - | ^ LSHIFT RSHIFT
        * / % &
        EQ NOTEQ < LTEQ > GTEQ
        AND
        OR
        ? :

    assignment operators:
        COLON_ASSIGN = ':='
        ADD_ASSIGN = '+='
        SUB_ASSIGN = '-='
        MUL_ASSIGN = '*='
        DIV_ASSIGN = '/='
        MOD_ASSIGN = '%='
        AND_ASSIGN = '&='
        OR_ASSIGN = '|='
        LSHIFT_ASSIGN = '<<='
        RSHIFT_ASSIGN = '>>='

    idents/literals:
        IDENT = [a-zA-Z_][a-zA-Z0-9_]*
        INT = 0 | [1-9][0-9]* | 0[xX][0-9a-fA-F]+ | 0[bB][0-1]+ | 0[0-7]+
        FLOAT = [0-9]* '.' [0-9]*
        CHAR = '\' . \''
        STR = '"' [^"]* '"'

EBNF Grammar:

    declarations:
        base_type = IDENT
                  | '(' type ')'
        type = base_type ('[' expr? ']' | '*')*
        type_list = type (',' type)*

        var_decl = IDENT ':' type ('=' expr)?
                 | IDENT ':=' expr

        const_decl = IDENT '=' expr 
        typedef_decl = IDENT '=' type

        aggregate_entry = IDENT ':' type ('=' expr)? ';'
        aggregate_list = IDENT '{' aggregate_entry* '}'

        enum_decl = IDENT '{' (IDENT (',' IDENT)?)* '}'

        func_param = IDENT ':' type ('=' expr)?
        func_param_list = func_param (',' func_param)*
        func_decl = IDENT '(' func_param_list? ')' ':' type_list? stmt_block

        decl = 'var' var_decl
             | 'const' const_decl
             | 'typedef' typedef_decl
             | 'struct' aggregate_list
             | 'union' aggregate_list
             | 'enum' enum_decl
             | 'func' func_decl

    statements:
     
        switch_case = 'case' expr ':' stmt_block
        switch_block = switch_case* ('default' ':' stmt_block)?
        stmt = 
             | 'if' expr stmt_block ('else if' expr stmt_block)* ('else' stmt_block)?
             | 'if' expr '==' switch_block
             | 'do' stmt_block 'while' expr
             | 'while' expr stmt_block
             | 'for' var_decl ';' expr ';' assign_stmt
